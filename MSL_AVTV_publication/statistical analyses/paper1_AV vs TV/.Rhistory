filter(model == "CBCsimpleRW_CBCdriftDiffusionLR")
simVars <- tempSum %>%
select(starts_with("sim") & !ends_with("startBelief")
& !ends_with("startingPoint")) %>%
names()
fitVars <- tempSum %>%
select(starts_with("fit") & !ends_with("startBelief") &
!ends_with("NLL") & !ends_with("startingPoint")) %>%
names()
tempSum <- simulationSummary %>%
filter(model == "CBCsimpleRW_CBCdriftDiffusionLR")
simVars <- tempSum %>%
select(starts_with("sim") & !ends_with("startBelief")
& !ends_with("startingPoint")) %>%
names()
fitVars <- tempSum %>%
select(starts_with("fit") & !ends_with("startBelief") &
!ends_with("NLL") & !ends_with("startingPoint")) %>%
names()
for (j in 1:length(simVars)){
eval(parse(text=paste0("plot", j, " <- ggplot(tempSum, aes(x = ", simVars[j],
", y = ", fitVars[j], ")) + geom_point(color = 'grey') + ",
"geom_abline(intercept =0, color = 'grey') +",
# "sm_statCorr(label_x = 0.01, label_y = 0.95, text_size = 5) +",
"ggtitle('", simVars[j], " vs. ", fitVars[j], "')")))
}
plot1 <- plot1 +
sm_statCorr(label_x = 0.01, label_y = 0.95, text_size = 5) +
ggtitle(expression("Recovery of Learning Rate " * italic(eta))) +
xlab(expression("simulated " * italic(alpha))) +
ylab(expression("recovered " * italic(alpha))) +
jtools::theme_apa(remove.y.gridlines = F, legend.pos = "none") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 1)) +
scale_x_continuous(expand = c(0, 0), limits = c(0, 1)) +
theme(text = element_text(size = 8),
plot.background = element_blank())
plot1 <- plot1 +
sm_statCorr(label_x = 0.01, label_y = 0.95, text_size = 5) +
ggtitle(expression("Recovery of Learning Rate " * italic(eta))) +
xlab(expression("simulated " * italic(eta))) +
ylab(expression("recovered " * italic(eta))) +
jtools::theme_apa(remove.y.gridlines = F, legend.pos = "none") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 1)) +
scale_x_continuous(expand = c(0, 0), limits = c(0, 1)) +
theme(text = element_text(size = 8),
plot.background = element_blank())
plot1
italic(eta)
plot1 <- plot1 +
sm_statCorr(label_x = 0.01, label_y = 0.95, text_size = 5) +
ggtitle(expression("Recovery of Learning Rate " * italic(eta))) +
xlab(expression("simulated " * italic(eta))) +
ylab(expression("recovered " * italic(eta))) +
jtools::theme_apa(remove.y.gridlines = F, legend.pos = "none") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 1)) +
scale_x_continuous(expand = c(0, 0), limits = c(0, 1)) +
theme(text = element_text(size = 8),
plot.background = element_blank())
plot1
plot2 <- plot2 +
sm_statCorr(label_x = 0.31, label_y = 1.05, text_size = 5) +
ggtitle(expression("Recovery of Non-decision Time " * italic(tau))) +
xlab(expression("simulated " * italic(tau))) +
ylab(expression("recovered " * italic(tau))) +
jtools::theme_apa(remove.y.gridlines = F, legend.pos = "none") +
scale_y_continuous(expand = c(0, 0), limits = c(0.3, 1.1)) +
scale_x_continuous(expand = c(0, 0), limits = c(0.3, 1.1)) +
theme(text = element_text(size = 8),
plot.background = element_blank())
plot2
plot3 <- plot3 +
sm_statCorr(label_x = 0.1, label_y = 13.5, text_size = 5) +
ggtitle(expression("Recovery of Drift Weight " * italic(v[mod]))) +
xlab(expression("simulated " * italic(v[mod]))) +
ylab(expression("recovered " * italic(v[mod]))) +
jtools::theme_apa(remove.y.gridlines = F, legend.pos = "none") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 15)) +
scale_x_continuous(expand = c(0, 0), limits = c(0, 15)) +
theme(text = element_text(size = 8),
plot.background = element_blank())
plot3
plot4 <- plot4 +
sm_statCorr(label_x = 1.1, label_y = 4.75, text_size = 5) +
ggtitle(expression("Recovery of Boundary " * italic(a))) +
xlab(expression("simulated " * italic(a))) +
ylab(expression("recovered " * italic(a))) +
jtools::theme_apa(remove.y.gridlines = F, legend.pos = "none") +
scale_y_continuous(expand = c(0, 0), limits = c(1, 5)) +
scale_x_continuous(expand = c(0, 0), limits = c(1, 5)) +
theme(text = element_text(size = 8),
plot.background = element_blank())
g <- ggarrange(plot1, plot2, plot3, plot4, ncol = 2, nrow = 2, align = "hv",
widths = c(0.9, 0.9), heights = c(1, 1)
#font.label = "bold", labels = c("A", "B", "C", "D")
)
# finalPlot <- annotate_figure(g,
#                 top = text_grob("Parameter Recovery Results", face = "bold", size = 18,
#                                 hjust = 0, x=0.01))
finalPlot <- g +
theme(plot.background = element_rect(fill = "white", color = NA))
finalPlot
ggsave(filename=paste0(outputFolder, "/figures/ParameterRecoveryDDMn.png"),
finalPlot,
width = 19, height = 19,  units = "cm")
# load tidyverse
library(tidyverse)
library(readr)
library(ggplot2)
library(ggpubr)
library(readxl)
library(lme4)
library(lmerTest)
#library(plyr)
library(rempsyc)
library(report)
library(smplot2)
library(gridExtra)
library(viridis)
##########################################################
##                       SETTINGS                       ##
##########################################################
# set seed for reproducible results
set.seed(27)
# set general folder using the current location
workspace <- getwd()
# set name of script with functions
funScript <- "funs.R"
# load functions into workspace
source(paste(workspace, funScript, sep = "/"))
# set names of folders for input and output files, set output filename
inputFolder <- paste(workspace, "input", sep = "/")
outputFolder <- paste(workspace, "output", sep = "/")
modelingFolder <- file.path('A:/Projects/04-03-ChildBrainCircuits/Analyses/Modeling/CBC_Modeling_v3_paper1/analysed')
logFolder <- 'B:/Data/CBC_Data/analyses/multisensory_nr/preprocessing/paper1_AVvsTV/'
# set data input folder as default location of input files
setwd(workspace)
## get the file names ####
subjects <- list.files(path = modelingFolder, pattern = "CBC_")
subjects <- subjects[nchar(subjects)==8 & subjects!="CBC_555" & subjects!="CBC_Ï©"] #simulated subjects have shorter names
fileNames <- list.files(paste(modelingFolder, sep = "/"), full.names = T, recursive = T)
modelingData <- read_csv(paste(outputFolder, "modelling", "modelingData.csv", sep = "/"))
# recalculate NLL for DDM ----
modelingData <- modelingData %>%
mutate(corrLik = if_else(is.na(choiceLeft), NA, corrLik))
newNLL <- modelingData %>%
group_by(ID, session, percModel, respModel) %>%
summarise(CL = mean(corrLik, na.rm=T),
NLL = if_else(is.na(CL), -sum(log(lik), na.rm = TRUE), -sum(log(corrLik), na.rm = TRUE)),
.groups = 'drop') %>%
select(-CL)
modelingData <- modelingData %>%
left_join(., newNLL)
remove(newNLL)
# create a summary table ####
# selecting the needed variables, grouping the data and then only taking the first entry for each group
modelingSummary <- modelingData %>%
dplyr::select(ID, session, mod2Type, percModel, respModel,
starts_with("fit"), NLL) %>%
group_by(ID, session, percModel, respModel) %>%
slice(1) %>%
ungroup() %>%
mutate(model = paste(percModel, respModel, sep = "_"))
# calculating the mean accuracy for each session
modelingAccuracy <- modelingData %>%
group_by(ID, session, percModel, respModel) %>%
summarise(accuracy = mean(choiceAccurate, na.rm=T),
probFB = round(mean(rewardAccurate, na.rm=T),2)) %>%
ungroup()
# adding the mean accuracy to the summary table
nparms <- modelingSummary %>%
select(ID, session, model, starts_with("fit"), -ends_with("startBelief"),
-ends_with("startingPoint"), -ends_with("NLL")) %>%
mutate(nparms = rowSums(!is.na(select(., -ID, -session, -model))),
nparms2 = nparms+2) %>%
select(ID, session, model, nparms, nparms2)
modelingSummary <- modelingSummary %>%
full_join(., modelingAccuracy, by = c("ID", "session", "percModel", "respModel")) %>%
left_join(., nparms, by = join_by(ID, session, model)) %>%
arrange(ID, session)
modelingSummary <- modelingSummary %>%
mutate(AIC = 2*NLL + 2*nparms,
BIC = 2*NLL + log(44)*nparms,
AIC2 = 2*NLL + 2*nparms2,
BIC2 = 2*NLL + log(44)*nparms2)
# analyses Modeling ----
# correlation alpha with accuracy
load(file.path(outputFolder, "data_childrenMR.RData"))
load(file.path(outputFolder, "expInfo_childrenMR.RData"))
load(file.path(outputFolder, "demo.RData"))
modelingSummary <- read_csv(file = paste(outputFolder, "modelling", "modelingSummary.csv", sep = "/"))
modelingData$bin[modelingData$trial >=1 & modelingData$trial < 12] <- 1
modelingData$bin[modelingData$trial >11 & modelingData$trial < 23] <- 2
modelingData$bin[modelingData$trial >22 & modelingData$trial < 34] <- 3
modelingData$bin[modelingData$trial >33 & modelingData$trial < 45] <- 4
behData$bin[behData$trials_runs.thisN >=0 & behData$trials_runs.thisN < 11] <- 1
behData$bin[behData$trials_runs.thisN >10 & behData$trials_runs.thisN < 22] <- 2
behData$bin[behData$trials_runs.thisN >21 & behData$trials_runs.thisN < 33] <- 3
behData$bin[behData$trials_runs.thisN >32 & behData$trials_runs.thisN < 44] <- 4
modelingData$bin <- as.factor(modelingData$bin)
behData$bin <- as.factor(behData$bin)
modelSelection <- modelingSummary %>%
filter(model == "CBCsimpleRW_CBCdriftDiffusionLR") %>%
group_by(ID, mod2Type) %>%
summarise(alpha = mean(fit_alpha1),
nonDecisionTime = mean(fit_nonDecisionTime),
boundary= mean(fit_startingBoundary),
mAcc = mean(accuracy)) %>%
left_join(.,demo[,c("ID", "age")], by = join_by(ID))
cor.test(modelSelection$alpha, modelSelection$mAcc)
ggplot(modelSelection, aes(alpha, mAcc)) +
geom_point() +
stat_smooth() +
facet_wrap(~mod2Type)
# learning rate and modality
alphaLM <- lmer(alpha ~ mod2Type + age + (1|ID), data=modelSelection)
summary(alphaLM)
anova(alphaLM)
report(anova(alphaLM))
lmTable <- nice_table(as.data.frame(report_table(alphaLM)),
title = "Linear Mixed Model for Learning Rate and Modality", note = "ABC",
#col.format.custom = c(2:6, 11:13), format.custom = "fun",
highlight = T)
lmTable
ggplot(modelSelection, aes(mod2Type, alpha, color=mod2Type)) +
geom_violin() +
ggtitle("Learning Rate and Modality")
# non-decision time and modality
TerLM <- lmer(nonDecisionTime ~ mod2Type + age + (1|ID), data=modelSelection)
anova(TerLM)
report(anova(TerLM))
summary(TerLM)
lmTable <- nice_table(as.data.frame(report_table(TerLM)),
title = "Linear Mixed Model for non-decision time and Modality", note = "ABC",
#col.format.custom = c(2:6, 11:13), format.custom = "fun",
highlight = T)
lmTable
modelSelection <- modelSelection %>%
mutate(modality = if_else(mod2Type=="aud", "AV","TV"))
ggplot(modelSelection, aes(modality, nonDecisionTime, group=modality, fill = modality)) +
geom_violin(alpha = 0.8) +
geom_boxplot(alpha = 0, width =0.2) +
scale_fill_manual(values = viridis(n=2, begin = 0.2, end = 0.8)) +
#geom_jitter(width = 0.1) +
#ggtitle("Non-Decision Time and Modality") +
ylab("Non-Decision Time") + xlab("Modality") +
geom_signif(
comparisons = list(c("AV", "TV")),
map_signif_level = TRUE,
y_position = c(1.1), # Adjust y positions for the lines
annotations = c(".004**"), # Corresponding significance levels
textsize = 4,
tip_length = 0,
vjust = 0.2,
color = "black") +
jtools::theme_apa(remove.y.gridlines = F) + scale_y_continuous(expand = c(0, 0), limits=c(0.2,1.2)) +
theme(text = element_text(size = 25, family = "Source Sans Pro"))
View(modelingData)
# drift rate
selectedData <- modelingData %>%
filter(respModel == "CBCdriftDiffusionLR") %>%
mutate(trial = trial-1) %>%
left_join(.,behData[,c("ID", "logfile", "trials_runs.thisN", "bin", "outlier200ms", "outlierSD",
"omission", "validTrials", "modality", "trials_runs.correct_answer")],
by = join_by("ID", "filename"=="logfile", "trial"=="trials_runs.thisN", "bin")) %>%
filter(validTrials==1) %>%
left_join(.,demo[,c("ID", "age")], by = join_by(ID))
View(selectedData)
unique(selectedData$bin)
selectedData %>%
select(ID, session, bin, modality, "0A belief", "1B belief", "2C belief", "3D belief") %>%
filter(bin == 4) %>%
group_by(ID, session, modality) %>%
summarise(meanVal = mean("0A belief", "1B belief", "2C belief", "3D belief"))
selectedData %>%
select(ID, session, bin, modality, "0A belief", "1B belief", "2C belief", "3D belief") %>%
filter(bin == 4) %>%
group_by(ID, session, modality) %>%
summarise(meanVal = rowMeans(across(c("0A belief", "1B belief", "2C belief", "3D belief"))))
selectedData %>%
select(ID, session, bin, modality, "0A belief", "1B belief", "2C belief", "3D belief") %>%
filter(bin == 4) %>%
group_by(ID, session, modality) %>%
mutate(meanVal = rowMeans(across(c("0A belief", "1B belief", "2C belief", "3D belief"))))
selectedData %>%
select(ID, session, bin, modality, "0A belief", "1B belief", "2C belief", "3D belief") %>%
filter(bin == 4)
selectedData %>%
select(ID, session, bin, modality, "0A belief", "1B belief", "2C belief", "3D belief") %>%
filter(bin == 4) %>%
group_by(ID, session, modality) %>%
summarise(across(c("0A belief", "1B belief", "2C belief", "3D belief"), mean, na.rm = T))
################################################################################
# Value and Accuracy
valData <- selectedData %>%
select(ID, session, bin, modality, "0A belief", "1B belief", "2C belief", "3D belief") %>%
filter(bin == 4) %>%
group_by(ID, session, modality) %>%
summarise(across(c("0A belief", "1B belief", "2C belief", "3D belief"), mean, na.rm = TRUE))
selectedData %>%
select(ID, session, bin, modality, "0A belief", "1B belief", "2C belief", "3D belief") %>%
filter(bin == 4) %>%
group_by(ID, session, modality) %>%
summarise(across(c("0A belief", "1B belief", "2C belief", "3D belief"), mean, na.rm = TRUE))
selectedData %>%
select(ID, session, bin, modality, "0A belief", "1B belief", "2C belief", "3D belief") %>%
filter(bin == 4) %>%
group_by(ID, session, modality) %>%
summarise(across(c("0A belief", "1B belief", "2C belief", "3D belief"), mean, na.rm = TRUE)) %>%
mutate(meanVal = rowMeans(across(c("0A belief", "1B belief", "2C belief", "3D belief"))))
mean(0.638       0.720       0.622       0.507)
mean(0.638, 0.720  ,     0.622    ,   0.507)
mean(.638, 0.720, 0.622, 0.507)
mean(.638, 0.720, 0.622, 0.507,1)
mean(0.638, 0.720, 0.622, 0.507,1)
mean(c(0.638, 0.720, 0.622, 0.507))
selectedData %>%
select(ID, session, bin, modality, age, "0A belief", "1B belief", "2C belief", "3D belief") %>%
filter(bin == 4) %>%
group_by(ID, session, modality) %>%
summarise(across(c("0A belief", "1B belief", "2C belief", "3D belief"), mean, na.rm = TRUE)) %>%
mutate(meanVal = rowMeans(across(c("0A belief", "1B belief", "2C belief", "3D belief"))))
selectedData %>%
select(ID, session, bin, modality, age, "0A belief", "1B belief", "2C belief", "3D belief") %>%
filter(bin == 4) %>%
group_by(ID, session, modality, age) %>%
summarise(across(c("0A belief", "1B belief", "2C belief", "3D belief"), mean, na.rm = TRUE)) %>%
mutate(meanVal = rowMeans(across(c("0A belief", "1B belief", "2C belief", "3D belief"))))
selectedData %>%
select(ID, session, bin, modality, age, "0A belief", "1B belief", "2C belief", "3D belief") %>%
filter(bin == 4) %>%
group_by(ID, session, age) %>%
summarise(across(c("0A belief", "1B belief", "2C belief", "3D belief"), mean, na.rm = TRUE)) %>%
mutate(meanVal = rowMeans(across(c("0A belief", "1B belief", "2C belief", "3D belief"))))
selectedData %>%
select(ID, session, bin, modality, age, "0A belief", "1B belief", "2C belief", "3D belief") %>%
filter(bin == 4) %>%
group_by(ID, modality, age) %>%
summarise(across(c("0A belief", "1B belief", "2C belief", "3D belief"), mean, na.rm = TRUE)) %>%
mutate(meanVal = rowMeans(across(c("0A belief", "1B belief", "2C belief", "3D belief"))))
0.662+0.622
(0.662+0.622)/2
(0.577+0.782)/2
################################################################################
# Value and Accuracy
valData <- selectedData %>%
select(ID, session, bin, modality, age, "0A belief", "1B belief", "2C belief", "3D belief") %>%
filter(bin == 4) %>%
group_by(ID, modality, age) %>%
summarise(across(c("0A belief", "1B belief", "2C belief", "3D belief"), mean, na.rm = TRUE)) %>%
mutate(meanVal = rowMeans(across(c("0A belief", "1B belief", "2C belief", "3D belief")))) %>%
################################################################################
# combine parameters and accuracies ----
learningLM <- lmer(mAcc ~ mod2Type + age + alpha + nonDecisionTime + boundary + (1|ID), data=modelSelection)
View(valData)
################################################################################
# Value and Accuracy
valData <- selectedData %>%
select(ID, session, bin, modality, age, "0A belief", "1B belief", "2C belief", "3D belief") %>%
filter(bin == 4) %>%
group_by(ID, modality, age) %>%
summarise(across(c("0A belief", "1B belief", "2C belief", "3D belief"), mean, na.rm = TRUE)) %>%
mutate(meanVal = rowMeans(across(c("0A belief", "1B belief", "2C belief", "3D belief"))))
View(modelingAccuracy)
meanAccuracy <- selectedData %>%
select(ID, session, modality, choiceAccurate) %>%
group_by(ID, modality) %>%
summarise(mACC = mean(choiceAccurate, na.rm = T))
View(meanAccuracy)
valData <- valData %>%
left_join(., meanAccuracy)
plot(valData$mACC, valData$meanVal)
plot(valData$age, valData$meanVal)
ggplot(valData, aes(x=age, y=meanVal, group = modality)) +
geom_point() +
stat_cor(method = "lm")
ggplot(valData, aes(x=age, y=meanVal, group = modality)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(valData, aes(x=age, y=meanVal, group = modality, color = modality)) +
geom_point() +
geom_smooth(method = "lm")
driftVAL <- lmer(meanVal ~ modality + age + (1|ID), data=valData)
valLM <- lmer(meanVal ~ modality + age + (1|ID), data=valData)
summary(valLM)
method = "lm"
ggplot(valData, aes(x=age, y=meanVal, group = modality, color = modality)) +
geom_point() +
geom_smooth()
View(selectedData)
valData2 <- selectedData %>%
select(ID, session, bin, modality, age, trial, "0A belief", "1B belief", "2C belief", "3D belief") %>%
group_by(ID, session, modality, age) %>%
filter(trial == max(trial)) %>%  # Select only the last trial in each session
ungroup() %>%
mutate(meanVal = rowMeans(across(c("0A belief", "1B belief", "2C belief", "3D belief")), na.rm = TRUE))
View(valData2)
valData2 <- selectedData %>%
select(ID, session, bin, modality, age, trial, "0A belief", "1B belief", "2C belief", "3D belief") %>%
group_by(ID, session, modality, age) %>%
filter(trial == max(trial)) %>%  # Select only the last trial in each session
ungroup() %>%
group_by(ID, modality, age) %>%
mutate(meanVal = rowMeans(across(c("0A belief", "1B belief", "2C belief", "3D belief")), na.rm = TRUE))
View(valData2)
selectedData %>%
select(ID, session, bin, modality, age, trial, "0A belief", "1B belief", "2C belief", "3D belief") %>%
group_by(ID, session, modality, age) %>%
filter(trial == max(trial)) %>%  # Select only the last trial in each session
ungroup() %>%
group_by(ID, modality, age) %>%
mutate(meanVal = rowMeans(across(c("0A belief", "1B belief", "2C belief", "3D belief")), na.rm = TRUE))
valData2 <- selectedData %>%
select(ID, session, bin, modality, age, trial, "0A belief", "1B belief", "2C belief", "3D belief") %>%
group_by(ID, session, modality, age) %>%
filter(trial == max(trial)) %>%  # Select only the last trial in each session
group_by(ID, modality, age) %>%
mutate(meanVal = rowMeans(across(c("0A belief", "1B belief", "2C belief", "3D belief")), na.rm = TRUE))
valData2 <- selectedData %>%
select(ID, session, bin, modality, age, trial, "0A belief", "1B belief", "2C belief", "3D belief") %>%
group_by(ID, session, modality, age) %>%
filter(trial == max(trial)) %>%  # Select only the last trial in each session
group_by(ID, modality, age) %>%
summarise(meanVal = rowMeans(across(c("0A belief", "1B belief", "2C belief", "3D belief")), na.rm = TRUE))
View(valData2)
valData2 <- selectedData %>%
select(ID, session, bin, modality, age, trial, "0A belief", "1B belief", "2C belief", "3D belief") %>%
group_by(ID, session, modality, age) %>%
filter(trial == max(trial)) %>%  # Select only the last trial in each session
group_by(ID, modality, age) %>%
summarise(across(c("0A belief", "1B belief", "2C belief", "3D belief"), mean, na.rm = TRUE)) %>%
mutate(meanVal = rowMeans(across(c("0A belief", "1B belief", "2C belief", "3D belief"))))
View(valData2)
plot(valData$meanVal, valData2$meanVal)
valData2 <- valData2 %>%
left_join(., meanAccuracy, by = join_by(ID, modality))
plot(valData2$mACC, valData2$meanVal)
plot(valData2$age, valData2$meanVal)
ggplot(valData2, aes(x=age, y=meanVal, group = modality, color = modality)) +
geom_point() +
geom_smooth()
valLM <- lmer(meanVal ~ modality + age + (1|ID), data=valData2)
summary(valLM)
valLM <- lmer(meanVal ~ modality + age + mACC + (1|ID), data=valData)
summary(valLM)
meanAccuracy <- selectedData %>%
select(ID, session, modality, choiceAccurate, reactionTime) %>%
group_by(ID, modality) %>%
summarise(mACC = mean(choiceAccurate, na.rm = T),
mRT = mean(reactionTime, na.rm = T))
################################################################################
# Value and Accuracy
valData <- selectedData %>%
select(ID, session, bin, modality, age, "0A belief", "1B belief", "2C belief", "3D belief") %>%
filter(bin == 4) %>%
group_by(ID, modality, age) %>%
summarise(across(c("0A belief", "1B belief", "2C belief", "3D belief"), mean, na.rm = TRUE)) %>%
mutate(meanVal = rowMeans(across(c("0A belief", "1B belief", "2C belief", "3D belief"))))
meanAccuracy <- selectedData %>%
select(ID, session, modality, choiceAccurate, reactionTime) %>%
group_by(ID, modality) %>%
summarise(mACC = mean(choiceAccurate, na.rm = T),
mRT = mean(reactionTime, na.rm = T))
valData <- valData %>%
left_join(., meanAccuracy, by = join_by(ID, modality))
plot(valData$mACC, valData$meanVal)
plot(valData$age, valData$meanVal)
ggplot(valData, aes(x=age, y=meanVal, group = modality, color = modality)) +
geom_point() +
geom_smooth()
valLM <- lmer(meanVal ~ modality + age + mACC + mRT + (1|ID), data=valData)
summary(valLM)
ggplot(valData, aes(x=mACC, y=meanVal, group = modality, color = modality)) +
geom_point() +
geom_smooth()
ggplot(valData, aes(x=mACC, y=meanVal, group = modality, color = modality)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(valData, aes(x=age, y=meanVal, group = modality, color = modality)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(valData, aes(x=mACC, y=meanVal, group = modality, color = modality)) +
geom_point() +
geom_smooth(method = "lm")
valData2 <- selectedData %>%
select(ID, session, bin, modality, age, trial, "0A belief", "1B belief", "2C belief", "3D belief") %>%
group_by(ID, session, modality, age) %>%
filter(trial == max(trial)) %>%  # Select only the last trial in each session
group_by(ID, modality, age) %>%
summarise(across(c("0A belief", "1B belief", "2C belief", "3D belief"), mean, na.rm = TRUE)) %>%
mutate(meanVal = rowMeans(across(c("0A belief", "1B belief", "2C belief", "3D belief"))))
valData2 <- valData2 %>%
left_join(., meanAccuracy, by = join_by(ID, modality))
plot(valData2$mACC, valData2$meanVal)
plot(valData2$age, valData2$meanVal)
ggplot(valData2, aes(x=age, y=meanVal, group = modality, color = modality)) +
geom_point() +
geom_smooth()
ggplot(valData2, aes(x=age, y=meanVal, group = modality, color = modality)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(valData2, aes(x=age, y=meanVal, group = modality, color = modality)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(valData2, aes(x=mACC, y=meanVal, group = modality, color = modality)) +
geom_point() +
geom_smooth(method = "lm")
valLM <- lmer(meanVal ~ modality + age + mACC + mRT + (1|ID), data=valData2)
summary(valLM2)
valLM2 <- lmer(meanVal ~ modality + age + mACC + mRT + (1|ID), data=valData2)
summary(valLM2)
valLM2 <- lmer(meanVal ~ modality + age + (1|ID), data=valData2)
summary(valLM2)
