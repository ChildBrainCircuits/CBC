p, medicalHist, meanRTFourthsPlot, meanPerformance, meanOmOutl, lowIQ,
lmTable, lmRT6, lmRT5PH, lmRT5, lmRT4, lmRT3, lmRT2, lmRT, lmPHTable,
lmGenderGrade, lmGenderGradeTable, lmACC7, lmACC6, lmACC5PH, lmACC5,
lmACC4, lmACC3, lmACC2, lmACC, LKplot, IQplot, IDSplot, gradePlot,
gradeGenderPlot, demoTableShort, demoTableGender, demoTable, behData4thsModality,
behData4thsModalitySession, behDataFourths, behDataFourthsSesison,
behDataModality, behDataModalitySession, behDataRT, agePlot, ACCplot, ACCplotsig,
ageGenderPlot, KiTAPplot, p, lmACC5.1, lmACC6.1, lmACC8, lmRT7, lmRT8,
ACCplotInterac, RTplotInterac)
subjects <- list.files(path = modelingFolder, pattern = "CBC_")
subjects <- subjects[nchar(subjects)<8 & subjects!="CBC_555" & subjects!="CBC_ϩ"] #simulated subjects have shorter names
fileNames <- list.files(paste(modelingFolder, sep = "/"), full.names = T, recursive = T)
fileNames
keep(str_detect(.,'driftDiffusionLR.'))
keep(str_detect(.,'driftDiffusionLR.mat'))
fileNames <- list.files(paste(modelingFolder, sep = "/"), full.names = T, recursive = T)
fileNames
fileNames %>%
keep(str_detect(.,'4_csv')) %>%
keep(str_detect(.,'Dfit')) %>%
keep(str_detect(.,'simpleRW'))
discard(str_detect(.,'pwBelief'))
fileNames %>%
keep(str_detect(.,'4_csv')) %>%
keep(str_detect(.,'Dfit')) %>%
keep(str_detect(.,'simpleRW')) %>%
discard(str_detect(.,'pwBelief'))
fileNames <- fileNames %>%
keep(str_detect(.,'4_csv')) %>%
keep(str_detect(.,'Dfit')) %>%
keep(str_detect(.,'simpleRW')) %>%
discard(str_detect(.,'pwBelief'))
fileNames <- fileNames[sapply(fileNames, function(a) any(str_detect(a, paste(subjects,"_", sep = ""))))]
## read files ####
simulationDataList <- lapply(fileNames, data.table::fread)
## merge list into 1 data frame ####
# creating a new empty data frame
simulationData <- data.frame()
#looping to the data frames, changing variable names so that they can be bound
#to one data frame
#adding new variables indicating the perception and response model
#converting variables to the correct type to be able to bind data frames
for (i in 1:length(simulationDataList)) {
rm(tempData)
tempData <- simulationDataList[[i]] %>%
rename_with(~ "sim_startBelief", matches("^sim.*startBelief$")) %>%
rename_with(~ "sim_alpha1", matches("^sim.*alpha1$")) %>%
rename_with(~ "fit_startBelief", matches("^fit.*startBelief$")) %>%
rename_with(~ "fit_alpha1", matches("^fit.*alpha1$"))  %>%
rename_with(~ "fit_NLL", matches("^fit.*NLL$"))
if (grepl("sigmoid", fileNames[i], ignore.case = T)) {
tempData <- tempData%>%
rename_with(~ "sim_beta", matches("^sim.*beta$")) %>%
rename_with(~ "fit_beta", matches("^fit.*beta$"))
}
# rename variables so that they are uniform for each modeling output
if (grepl("both", fileNames[i], ignore.case = T)) {
tempData <- tempData %>%
rename_with(~ "sim_alpha2", matches("^sim.*alpha2$")) %>%
rename_with(~ "fit_alpha2", matches("^fit.*alpha2$"))
}
if (grepl("CBCpearceHall_", fileNames[i])) {
tempData <- tempData %>%
rename_with(~ "sim_delta1", matches("^sim.*delta$")) %>%
rename_with(~ "fit_delta1", matches("^fit.*delta$"))
}
if (grepl("CBCpearceHallBoth", fileNames[i])) {
tempData <- tempData %>%
rename_with(~ "sim_delta1", matches("^sim.*delta$")) %>%
rename_with(~ "fit_delta1", matches("^fit.*delta1$")) %>%
rename_with(~ "sim_delta2", matches("^sim.*delta2$")) %>%
rename_with(~ "fit_delta2", matches("^fit.*delta2$"))
}
if (grepl("CBCdriftDiffusion", fileNames[i])) {
tempData <- tempData %>%
rename_with(~ "sim_startingPoint", matches("^sim.*startingPoint$")) %>%
rename_with(~ "fit_startingPoint", matches("^fit.*startingPoint$")) %>%
rename_with(~ "sim_startingBoundary", matches("^sim.*startingBoundary$")) %>%
rename_with(~ "fit_startingBoundary", matches("^fit.*startingBoundary$")) %>%
rename_with(~ "sim_weight", matches("^sim.*weight$")) %>%
rename_with(~ "fit_weight", matches("^fit.*weight$")) %>%
rename_with(~ "sim_nonDecisionTime", matches("^sim.*nonDecisionTime$")) %>%
rename_with(~ "fit_nonDecisionTime", matches("^fit.*nonDecisionTime$"))
}
#find the name of the perceptual model in the file name and add it as a variable to the data frame
nPercModel <- which(str_detect(strsplit(fileNames[i],"_")[[1]], "RW") |
str_detect(strsplit(fileNames[i],"_")[[1]], "pearce"))
tempData$percModel <- strsplit(fileNames[i],"_")[[1]][nPercModel]
#determine the response model and add it as a variable to the data frame
if (grepl("pwBelief", fileNames[i])) {
respModel <- paste(strsplit(fileNames[i],"_")[[1]][nPercModel+1],
strsplit(fileNames[i],"_")[[1]][nPercModel+2],
sep = "_")
} else {
respModel <- strsplit(fileNames[i],"_")[[1]][nPercModel+1]
}
if (grepl("csv", respModel)){
respModel <- strsplit(respModel,"\\.")[[1]][1]
}
tempData$respModel <- respModel
tempData <- as.data.frame(tempData)
# converts varaibles to characters to be able to bind the data frames
columns_to_convert <- c("stimPairLeft", "stimPairRight", "chosenPair", "otherPair")
tempData[columns_to_convert] <- lapply(tempData[columns_to_convert], as.character)
# binding all data frames in one data frame
simulationData <- bind_rows(simulationData, tempData)
}
## write data ####
write_csv(simulationData, file = paste(outputFolder, "modelling", "simulationData.csv", sep = "/"))
simulationSummary <- simulationData %>%
dplyr::select(ID, session, percModel, respModel,
starts_with("sim"), starts_with("fit")) %>%
group_by(ID, session, percModel, respModel) %>%
slice(1) %>%
ungroup()
# calculating the mean accuracy for each session
simulationAccuracy <- simulationData %>%
group_by(ID, session, percModel, respModel) %>%
summarise(accuracy = mean(choiceAccurate, na.rm=T),
probFB = round(mean(rewardAccurate, na.rm=T),2)) %>%
ungroup()
# adding the mean accuracy to the summary table
simulationSummary <- simulationSummary %>%
full_join(., simulationAccuracy, by = c("ID", "session", "percModel", "respModel")) %>%
arrange(ID, session) %>%
mutate(model = paste(percModel, respModel, sep = "_"))
## write data ####
write_csv(simulationSummary, file = paste(outputFolder, "modelling", "simulationSummary.csv", sep = "/"))
subjects <- list.files(path = modelingFolder, pattern = "CBC_")
subjects <- subjects[nchar(subjects)==8 & subjects!="CBC_555" & subjects!="CBC_ϩ"] #simulated subjects have shorter names
fileNames <- list.files(paste(modelingFolder, sep = "/"), full.names = T, recursive = T)
fileNames <- fileNames %>%
keep(str_detect(.,'4_csv')) %>%
keep(str_detect(.,'Dfit')) %>%
keep(str_detect(.,'CBCsimpleRW_CBCdriftDiffusionLR.'))
fileNames <- fileNames[sapply(fileNames, function(a) any(str_detect(a, paste(subjects,"_", sep = ""))))]
fileNames
## get the file names ####
subjects <- read_csv(file.path(outputFolder, 'finalSubjects.csv'))
subjects <- subjects$ID
fileNames <- list.files(paste(modelingFolder, sep = "/"), full.names = T, recursive = T)
fileNames <- fileNames %>%
keep(str_detect(.,'4_csv')) %>%
keep(str_detect(.,'Dfit')) %>%
keep(str_detect(.,'CBCsimpleRW_CBCdriftDiffusionLR.'))
fileNames <- fileNames[sapply(fileNames, function(a) any(str_detect(a, paste(subjects,"_", sep = ""))))]
fileNames
fileNames <- fileNames %>%
keep(str_detect(.,'4_csv')) %>%
keep(str_detect(.,'Dfit')) %>%
keep(str_detect(.,'CBCsimpleRW_CBCdriftDiffusionLR.csv'))
fileNames <- fileNames[sapply(fileNames, function(a) any(str_detect(a, paste(subjects,"_", sep = ""))))]
# Load and merge data ------------------------------------
##########################################################
load(file.path(outputFolder, "demo.RData"))
#load(file.path(outputFolder, "modelSelection.RData"))
modellingOuput <- read_csv(file.path(outputFolder, "modelling", "modellingOuputfMRI.csv"))
load(file.path(outputFolder, "modelSelection.RData"))
View(modelSelection)
files <- list.files(file.path(inputFolder, 'ROI')) %>%
discard(str_detect(.,'extracedBetas.csv'))
files
load(file.path(outputFolder, "extractedBetaslong.RData"))
# beta values MS
betasSubMS <- extractedBetaslong %>%
filter(mask == "MSTACT_uniform",
hemisphere != "wholeBrain") %>%
group_by(ID, mask, modality, label, hemisphere, age, learningRate) %>%
summarise(betaValues = mean(betaValues))
MSImin <- floor(min(betasSubMS$betaValues)) # -2.849
MSImax <- ceiling(max(betasSubMS$betaValues)) # 9.624
betasMS <- extractedBetaslong %>%
filter(mask == "MSTACT_uniform",
hemisphere == "wholeBrain")
betasSubPE <- extractedBetaslong %>%
filter(mask == "PE_uniform",
hemisphere != "wholeBrain") %>%
group_by(ID, mask, modality, label, hemisphere, age, learningRate) %>%
summarise(betaValues = mean(betaValues))
PEmin <- floor(min(betasSubPE$betaValues)) # -8.121
PEmax <- ceiling(max(betasSubPE$betaValues)) # 5.689
betasPE <- extractedBetaslong %>%
filter(mask == "PE_uniform",
hemisphere == "wholeBrain")
betasSubVAL <- extractedBetaslong %>%
filter(mask == "VAL_uniform",
hemisphere != "wholeBrain") %>%
group_by(ID, mask, modality, label, hemisphere, age, learningRate) %>%
summarise(betaValues = mean(betaValues))
VALmin <- floor(min(betasSubVAL$betaValues)) # -180.406
VALmax <- ceiling(max(betasSubVAL$betaValues)) # 236.328
betasVAL <- extractedBetaslong %>%
filter(mask == "VAL_uniform",
hemisphere == "wholeBrain")
# Load and merge data ------------------------------------
##########################################################
meanFWDrun <- read_excel('B:/Data/CBC_Data/analyses/multisensory_nr/analyses/MR_children/paper1NEW/meanFWD.xlsx')
#meanFWDrun <- read_excel("B:/Data/CBC_Data/analyses/multisensory_nr/outputs/children_MR/badScans/badscans_allBad_v2_FWD_Art.xlsx")
load(file.path(outputFolder, "demo.RData"))
meanFWD <- meanFWDrun %>%
mutate(meanFWD = rowMeans(meanFWDrun[,2:6], na.rm = TRUE)) %>%
select(ID, meanFWD) %>%
left_join(., demo[,c('ID', 'age')], by = join_by(ID))
meanFWD <- meanFWDrun %>%
select(ID, meanFWDValue) %>%
group_by(ID) %>%
summarise(meanFWD = mean(meanFWDValue, na.rm = TRUE)) %>%
left_join(., demo[,c('ID', 'age')], by = join_by(ID)) %>%
filter(!is.na(age))
cor.test(meanFWD$meanFWD, meanFWD$age)
report(cor.test(meanFWD$meanFWD, meanFWD$age))
unique(meanFWD$ID)
length(unique(meanFWD$ID))
meanFWDrun <- read_excel("B:/Data/CBC_Data/analyses/multisensory_nr/outputs/children_MR/badScans/badscans_allBad_v2_FWD_Art.xlsx")
meanFWD <- meanFWDrun %>%
mutate(meanFWD = rowMeans(meanFWDrun[,2:6], na.rm = TRUE)) %>%
select(ID, meanFWD) %>%
left_join(., demo[,c('ID', 'age')], by = join_by(ID))
meanFWD <- meanFWDrun %>%
select(ID, meanFWDValue) %>%
group_by(ID) %>%
summarise(meanFWD = mean(meanFWDValue, na.rm = TRUE)) %>%
left_join(., demo[,c('ID', 'age')], by = join_by(ID)) %>%
filter(!is.na(age))
meanFWDrun %>%
select(ID, meanFWDValue)
# Load and merge data ------------------------------------
##########################################################
meanFWDrun <- read_excel("B:/Data/CBC_Data/analyses/multisensory_nr/outputs/children_MR/badScans/badscans_allBad_v2_FWD_Art.xlsx")
remove(meanFWDrun)
meanFWDrun %>%
select(ID, meanFWDValue)
# Load and merge data ------------------------------------
##########################################################
meanFWDrun <- read_excel("B:/Data/CBC_Data/analyses/multisensory_nr/outputs/children_MR/badScans/badscans_allBad_v2_FWD_Art.xlsx")
View(meanFWDrun)
# prepare data
meanFWD <- meanFWDrun %>%
select(ID, 'meanFWDValue...17') %>%
rename(meanFWDValue = 'meanFWDValue...17') %>%
group_by(ID) %>%
summarise(meanFWD = mean(meanFWDValue, na.rm = TRUE)) %>%
left_join(., demo[,c('ID', 'age')], by = join_by(ID)) %>%
filter(!is.na(age))
View(meanFWD)
meanFWDrun <- read_excel("B:/Data/CBC_Data/analyses/multisensory_nr/outputs/children_MR/badScans/badscans_allBad_v2_FWD_Art.xlsx")
load(file.path(outputFolder, "demo.RData"))
# prepare data
meanFWD <- meanFWDrun %>%
select(ID, 'meanFWDValue...17') %>%
rename(meanFWDValue = 'meanFWDValue...17')
View(meanFWD)
length(unique(meanFWD$meanFWDValue))
length(unique(meanFWD$ID)
)
View(meanFWD)
# Load and merge data ------------------------------------
##########################################################
meanFWDrun <- read_excel("B:/Data/CBC_Data/analyses/multisensory_nr/outputs/children_MR/badscans_allBad_v2_FWD_Art.xlsx")
View(meanFWDrun)
load(file.path(outputFolder, "demo.RData"))
meanFWD <- meanFWDrun %>%
select(ID, 'meanFWDValue...17') %>%
rename(meanFWDValue = 'meanFWDValue...17') %>%
filter(ID %in% demo$ID)
meanFWDrun
meanFWDrun %>%
select(ID, 'meanFWDValue') %>%
filter(ID %in% demo$ID)
meanFWDrun %>%
select(ID, 'meanFWDValue') %>%
filter(ID %in% demo$ID)
group_by(ID) %>%
summarise(meanFWD = mean(meanFWDValue, na.rm = TRUE))
meanFWDrun
meanFWDrun %>%
select(ID, 'meanFWDValue')
meanFWDrun %>%
select(ID, 'meanFWDValue') %>%
filter(ID %in% demo$ID)
meanFWDrun %>%
select(ID, 'meanFWDValue') %>%
filter(ID %in% demo$ID)
group_by(ID)
meanFWDrun %>%
select(ID, 'meanFWDValue') %>%
filter(ID %in% demo$ID) %>%
group_by(ID) %>%
summarise(meanFWD = mean(meanFWDValue, na.rm = TRUE))
meanFWDrun %>%
select(ID, 'meanFWDValue') %>%
#filter(ID %in% demo$ID) %>%
group_by(ID) %>%
summarise(meanFWD = mean(meanFWDValue, na.rm = TRUE))
View(meanFWD)
meanFWD <- meanFWDrun %>%
select(ID, 'meanFWDValue') %>%
#filter(ID %in% demo$ID) %>%
group_by(ID) %>%
summarise(meanFWD = mean(meanFWDValue, na.rm = TRUE))
meanFWD$ID
demo$IDS_procSpeed_tval
demo$ID
unique(meanFWDrun$ID)
meanFWDrun <- read_excel("B:/Data/CBC_Data/analyses/multisensory_nr/outputs/children_MR/badScans/badscans_allBad_v2_FWD_Art.xlsx")
load(file.path(outputFolder, "demo.RData"))
# prepare data
meanFWD <- meanFWDrun %>%
select(ID, 'meanFWDValue') %>%
#filter(ID %in% demo$ID) %>%
group_by(ID) %>%
summarise(meanFWD = mean(meanFWDValue, na.rm = TRUE))
# prepare data
meanFWD <- meanFWDrun %>%
select(ID, 'meanFWDValue...17') %>%
rename(meanFWEValue = 'meanFWDValue...17') %>%
#filter(ID %in% demo$ID) %>%
group_by(ID) %>%
summarise(meanFWD = mean(meanFWDValue, na.rm = TRUE))
meanFWDrun %>%
select(ID, 'meanFWDValue...17') %>%
rename(meanFWEValue = 'meanFWDValue...17')
meanFWDrun %>%
select(ID, 'meanFWDValue...17') %>%
rename(meanFWEValue = 'meanFWDValue...17') %>%
#filter(ID %in% demo$ID) %>%
group_by(ID)
meanFWDrun %>%
select(ID, 'meanFWDValue...17') %>%
rename(meanFWEValue = 'meanFWDValue...17') %>%
#filter(ID %in% demo$ID) %>%
group_by(ID) %>%
summarise(meanFWD = mean(meanFWDValue, na.rm = TRUE))
# prepare data
meanFWD <- meanFWDrun %>%
select(ID, 'meanFWDValue...17') %>%
rename(meanFWE = 'meanFWDValue...17') %>%
#filter(ID %in% demo$ID) %>%
group_by(ID) %>%
summarise(meanFWD = mean(meanFWDValue, na.rm = TRUE))
# prepare data
meanFWD <- meanFWDrun %>%
select(ID, 'meanFWDValue...17') %>%
rename(meanFWDValue = 'meanFWDValue...17') %>%
#filter(ID %in% demo$ID) %>%
group_by(ID) %>%
summarise(meanFWD = mean(meanFWDValue, na.rm = TRUE))
View(meanFWD)
View(meanFWDrun)
View(meanFWD)
# prepare data
meanFWD <- meanFWDrun %>%
select(ID, 'meanFWDValue...17') %>%
rename(meanFWDValue = 'meanFWDValue...17') %>%
filter(ID %in% demo$ID) %>%
group_by(ID) %>%
summarise(meanFWD = mean(meanFWDValue, na.rm = TRUE))
# Load and merge data ------------------------------------
##########################################################
meanFWDrun <- read_excel(file.path(inputFolder, "badscans_allBad_v2_FWD09.xlsx"))
load(file.path(outputFolder, "demo.RData"))
# prepare data
meanFWD <- meanFWDrun %>%
select(ID, 'meanFWDValue...17') %>%
rename(meanFWDValue = 'meanFWDValue...17') %>%
filter(ID %in% demo$ID) %>%
group_by(ID) %>%
summarise(meanFWD = mean(meanFWDValue, na.rm = TRUE))
# prepare data
meanFWD <- meanFWDrun %>%
select(ID, meanFWDValue) %>%
filter(ID %in% demo$ID) %>%
group_by(ID) %>%
summarise(meanFWD = mean(meanFWDValue, na.rm = TRUE))
# prepare data
meanFWD <- meanFWDrun %>%
select(ID, meanFWDValue) %>%
filter(ID %in% demo$ID) %>%
group_by(ID) %>%
summarise(meanFWD = mean(meanFWDValue, na.rm = TRUE)) %>%
left_join(., demo[,c('ID', 'age')], by = join_by(ID))
View(meanFWD)
cor.test(meanFWD$meanFWD, meanFWD$age)
report(cor.test(meanFWD$meanFWD, meanFWD$age))
summary(lm(meanFWD ~ age, meanFWD))
anova(lm(meanFWD ~ age, meanFWD))
report(anova(lm(meanFWD ~ age, meanFWD)))
ggplot(meanFWD, aes(age, meanFWD)) +
geom_point() +
stat_smooth(method = "lm") +
ggtitle("") +
ylab("mean FWD") +
jtools::theme_apa(remove.y.gridlines = F) + scale_y_continuous(expand = c(0, 0), limits=c(0,1.25)) +
theme(#text = element_text(size = 25),  # Increases all text
axis.title.y = element_text(size = 22), # Axis titles
axis.title.x = element_text(size = 22), # Axis titles
axis.text.y = element_text(size = 20), # Axis titles
axis.text.x = element_text(size = 20), # Axis titles
legend.text = element_text(size = 22),  # Legend text
strip.text.x = element_text(size=22),
plot.title = element_text(size=22),
legend.position = "none"
)
max(meanFWD$meanFWD)
min(meanFWD$meanFWD)
ggplot(meanFWD, aes(age, meanFWD)) +
geom_point() +
stat_smooth(method = "lm") +
ggtitle("") +
ylab("mean FWD") +
jtools::theme_apa(remove.y.gridlines = F) + scale_y_continuous(expand = c(0, 0), limits=c(0,1.6)) +
theme(#text = element_text(size = 25),  # Increases all text
axis.title.y = element_text(size = 22), # Axis titles
axis.title.x = element_text(size = 22), # Axis titles
axis.text.y = element_text(size = 20), # Axis titles
axis.text.x = element_text(size = 20), # Axis titles
legend.text = element_text(size = 22),  # Legend text
strip.text.x = element_text(size=22),
plot.title = element_text(size=22),
legend.position = "none"
)
meanFWDrun <- read_excel(file.path(inputFolder, "badscans_allBad_v2_FWD09.xlsx"))
load(file.path(outputFolder, "demo.RData"))
# prepare data
meanFWD <- meanFWDrun %>%
select(ID, meanFWDValue) %>%
filter(ID %in% demo$ID) %>%
group_by(ID) %>%
summarise(meanFWD = mean(meanFWDValue, na.rm = TRUE)) %>%
left_join(., demo[,c('ID', 'age')], by = join_by(ID))
cor.test(meanFWD$meanFWD, meanFWD$age)
report(cor.test(meanFWD$meanFWD, meanFWD$age))
summary(lm(meanFWD ~ age, meanFWD))
anova(lm(meanFWD ~ age, meanFWD))
report(anova(lm(meanFWD ~ age, meanFWD)))
ggplot(meanFWD, aes(age, meanFWD)) +
geom_point() +
stat_smooth(method = "lm") +
ggtitle("") +
ylab("mean FWD") +
jtools::theme_apa(remove.y.gridlines = F) + scale_y_continuous(expand = c(0, 0), limits=c(0,1.6)) +
theme(#text = element_text(size = 25),  # Increases all text
axis.title.y = element_text(size = 22), # Axis titles
axis.title.x = element_text(size = 22), # Axis titles
axis.text.y = element_text(size = 20), # Axis titles
axis.text.x = element_text(size = 20), # Axis titles
legend.text = element_text(size = 22),  # Legend text
strip.text.x = element_text(size=22),
plot.title = element_text(size=22),
legend.position = "none"
)
ggsave(file.path(outputFolder, "figures", "FWDcorrAge.tif"),
width = 24, height = 15, units = "cm")
report(anova(lm(meanFWD ~ age, meanFWD)))
report(cor.test(meanFWD$meanFWD, meanFWD$age))
##########################################################
##                       LIBRARIES                      ##
##########################################################
# clear workspacce
rm(list=ls())
# set seed for reproducible results
set.seed(27)
# set general folder using the current location
workspace <- getwd()
setwd('../../..')
repoPath <- getwd()
# set name of script with functions
funScript <- "funs.R"
# load functions into workspace
source(paste(workspace, funScript, sep = "/"))
setwd("B:/Data/CBC_Data/analyses/multisensory_nr/for_repositories/paper1_AVTV/scripts/statistical analyses/paper1_AV vs TV")
set.seed(27)
# set general folder using the current location
workspace <- getwd()
setwd('../../..')
repoPath <- getwd()
# set name of script with functions
funScript <- "funs.R"
# load functions into workspace
source(paste(workspace, funScript, sep = "/"))
# set names of folders for input and output files, set output filename
inputFolder <- paste(workspace, "input", sep = "/")
outputFolder <- paste(workspace, "output", sep = "/")
modelingFolder <- file.path(repoPath, 'scripts/modelling/analysed/')
logFolder <- file.path(repoPath, 'data/logfiles/')
# set data input folder as default location of input files
setwd(workspace)
load(file.path(outputFolder, "expInfo_childrenMR.RData"))
load(file.path(outputFolder, "demo.RData"))
modelingData <- read_csv(paste(outputFolder, "modelling", "modelingData.csv", sep = "/"))
load(file.path(outputFolder, "extractedBetaslong.RData"))
##########################################################
# remove subs --------------------------------------------
subsDiagnosed <- c('CBC_1051', 'CBC_1108', 'CBC_1003', 'CBC_1014', 'CBC_1019',
'CBC_1072', 'CBC_1090', 'CBC_1093', 'CBC_1119', 'CBC_1146')
behDataShort <- behData %>%
filter(!(ID %in% subsDiagnosed))
##########################################################
# load data ----------------------------------------------
load(file.path(outputFolder, "data_childrenMR.RData"))
behDataShort <- behData %>%
filter(!(ID %in% subsDiagnosed))
modelingDataShort <- modelingData %>%
filter(!(ID %in% subsDiagnosed))
expInfoShort <- expInfo %>%
filter(!(ID %in% subsDiagnosed))
demoShort <- demo %>%
filter(!(ID %in% subsDiagnosed))
demoExcluded <- demo %>%
filter(ID %in% subsDiagnosed)
extractedBetaslongShort <- extractedBetaslong %>%
filter(!(ID %in% subsDiagnosed))
